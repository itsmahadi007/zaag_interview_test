# Generated by Django 4.2 on 2024-10-27 06:10

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("cosmos", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="DataModel",
            fields=[
                ("primary_key", models.AutoField(primary_key=True, serialize=False)),
                ("id", models.CharField(blank=True, max_length=100, null=True)),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "accession_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("go_id", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "class_field",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("copies_per_million_cpm", models.FloatField(blank=True, null=True)),
                ("abundance_score", models.FloatField(blank=True, null=True)),
                ("tax_id", models.IntegerField(blank=True, null=True)),
                ("caz_id", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "normalized_reads_frequency",
                    models.FloatField(blank=True, null=True),
                ),
                ("relative_abundance", models.FloatField(blank=True, null=True)),
                ("unique_matches", models.FloatField(blank=True, null=True)),
                ("reads_frequency", models.FloatField(blank=True, null=True)),
                ("unique_matches_frequency", models.FloatField(blank=True, null=True)),
                ("enzyme_id", models.CharField(blank=True, max_length=255, null=True)),
                ("go_description", models.TextField(blank=True, null=True)),
                ("total_matches", models.FloatField(blank=True, null=True)),
                ("pfam_id", models.CharField(blank=True, max_length=255, null=True)),
                ("gtdb_id", models.CharField(blank=True, max_length=255, null=True)),
                ("domain", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "go_category",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("file_name", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "ordering": ["primary_key"],
            },
        ),
        migrations.CreateModel(
            name="Results",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="RootSample",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="SubSample",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "root_sample",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sub_samples",
                        to="cosmos.rootsample",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Taxonomy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "result_of",
                    models.ForeignKey(
                        limit_choices_to={"name": "Bacteria"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="taxonomy",
                        to="cosmos.results",
                    ),
                ),
            ],
        ),
        migrations.DeleteModel(
            name="CosmosModel",
        ),
        migrations.AddField(
            model_name="results",
            name="sub_sample",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="results",
                to="cosmos.subsample",
            ),
        ),
        migrations.AddField(
            model_name="datamodel",
            name="result_of",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="data_models",
                to="cosmos.results",
            ),
        ),
        migrations.AddField(
            model_name="datamodel",
            name="taxonomy",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="data_models",
                to="cosmos.taxonomy",
            ),
        ),
    ]
